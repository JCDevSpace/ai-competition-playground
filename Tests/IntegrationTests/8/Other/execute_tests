#!/usr/bin/python3

import pathlib
import unittest
import subprocess
import json

scriptPath = pathlib.Path(__file__).parent.absolute()

class TestStrategy(unittest.TestCase):
    """Test for strategy functionality with test harness.
    """

    def test1Strat(self):
        with open(str(scriptPath / "../Tests/1-in.json"), "r") as inputFile, open(str(scriptPath / "../Tests/1-out.json"), "r") as outputFile:
            self.assertTreeTest(inputFile, outputFile)


    def test2Strat(self):
        with open(str(scriptPath / "../Tests/2-in.json"), "r") as inputFile, open(str(scriptPath / "../Tests/2-out.json"), "r") as outputFile:
            self.assertTreeTest(inputFile, outputFile)


    def test3Strat(self):
        with open(str(scriptPath / "../Tests/3-in.json"), "r") as inputFile, open(str(scriptPath / "../Tests/3-out.json"), "r") as outputFile:
            self.assertTreeTest(inputFile, outputFile)


    def assertTreeTest(self, inputFile, outputFile):
        pid = subprocess.run([str(scriptPath / "../xref")], stdin = inputFile, stdout = subprocess.PIPE)

        actualOutput = json.loads(pid.stdout)
        expectedOutput = json.loads(outputFile.read())

        self.assertEqual(actualOutput, expectedOutput)


if __name__ == "__main__":
	unittest.main()

